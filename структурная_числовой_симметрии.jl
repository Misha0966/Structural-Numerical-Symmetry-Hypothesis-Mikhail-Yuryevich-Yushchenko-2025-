using Printf   # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
using CSV      # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
using DataFrames # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ N –Ω–∞ m —á–∞—Å—Ç–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö –ø–æ –¥–ª–∏–Ω–µ

function split_number(N::Integer, m::Integer)
s = string(N) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è
len = length(s) # –î–ª–∏–Ω–∞ —á–∏—Å–ª–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä)
base_len = div(len, m) # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
remainder = len % m # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ 1 —Å–∏–º–≤–æ–ª

parts = String[] # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —á–∏—Å–ª–∞
idx = 1 # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ

for i in 1:m
current_len = base_len + (i <= remainder ? 1 : 0)  # –î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
push!(parts, s[idx:idx+current_len-1]) # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
idx += current_len # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
end

return [parse(BigInt, p) for p in parts] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ BigInt
end

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç PQ –∏ N*k –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
function compare_pq_nk(pq::String, nk::String)
if pq == nk
return "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
elseif startswith(nk, first(pq)) && endswith(nk, last(pq))
return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"
elseif startswith(nk, first(pq))
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ"
elseif endswith(nk, last(pq))
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü"
else
return "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
end
end

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ N
function check_hypothesis(N::Integer, m::Integer, k::Integer)
N_str = string(N) # –ß–∏—Å–ª–æ N –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
nk = string(N * k) # –£–º–Ω–æ–∂–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

parts = split_number(N, m) # –†–∞–∑–±–∏–≤–∞–µ–º N –Ω–∞ m —á–∞—Å—Ç–µ–π
pq_parts = [string(p * k) for p in parts] # –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
pq = join(pq_parts) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ —á–∏—Å–ª–æ PQ

result = compare_pq_nk(pq, nk) # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º PQ –∏ N*k

return (
N = N,
m = m,
k = k,
parts = string(parts),
multiplied_parts = string([p * k for p in parts]),
PQ = pq,
NK = nk,
result = result
)
end

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª

function run_tests(start_N::Integer, stop_N::Integer, m::Integer, k::Integer)

# –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

results_df = DataFrame(
N = BigInt[],
m = Int[],
k = Int[],
parts = String[],
multiplied_parts = String[],
PQ = String[],
NK = String[],
result = String[]
)

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

count_full = 0
count_partial_start = 0
count_partial_end = 0
count_partial_both = 0
count_none = 0

@printf("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã\n")
@printf("–î–∏–∞–ø–∞–∑–æ–Ω: [%d, %d], m = %d, k = %d\n", start_N, stop_N, m, k)

for N in start_N:stop_N

print("\rüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ N = $N...")  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

res = check_hypothesis(N, m, k)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ N

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
        
push!(results_df, [
res.N
res.m
res.k
res.parts
res.multiplied_parts
res.PQ
res.NK
res.result
])

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏

if res.result == "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
count_full += 1
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"
count_partial_both += 1
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ"
count_partial_start += 1
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü"
count_partial_end += 1
else
count_none += 1
end
end

println("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV...")
CSV.write("results.csv", results_df)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª CSV

# –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
@printf("  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", count_full)
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ: %d\n", count_partial_start)
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü: %d\n", count_partial_end)
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: %d\n", count_partial_both)
@printf("  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", count_none)

println("\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results.csv'")
return results_df
end

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

start_N = 10  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
stop_N = 100 # –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
m = 2 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
k = 7 # –º–Ω–æ–∂–∏—Ç–µ–ª—å

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
run_tests(start_N, stop_N, m, k)
