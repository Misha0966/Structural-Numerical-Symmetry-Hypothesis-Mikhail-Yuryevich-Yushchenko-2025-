using Printf # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @printf)
using CSV # –î–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV-—Ñ–∞–π–ª
using DataFrames # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
using Base.Threads  # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
using ProgressMeter # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ N –Ω–∞ m —á–∞—Å—Ç–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö –ø–æ –¥–ª–∏–Ω–µ

function split_number_str(N::Integer, m::Integer)
s = string(N) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ N –≤ —Å—Ç—Ä–æ–∫—É
len = length(s) # –î–ª–∏–Ω–∞ —á–∏—Å–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
base_len = div(len, m) # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
remainder = len % m # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ –¥–æ–±–∞–≤–∏—Ç—å +1

parts = String[] # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π
idx = 1 # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏

for i in 1:m # –¶–∏–∫–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Å—Ç–µ–π
current_len = base_len + (i <= remainder ? 1 : 0)  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
push!(parts, s[idx:idx+current_len-1]) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
idx += current_len # –°–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
end

return parts # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π
end

# –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–∂–∞–µ—Ç —á–∞—Å—Ç—å —á–∏—Å–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –¥–ª–∏–Ω—É 
function multiply_preserve_length(part::String, k::Integer)
num = parse(BigInt, part) * k # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ BigInt –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ k
result = string(num) # –û–±—Ä–∞—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

# –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–æ—á–µ –∏—Å—Ö–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ —Å–ª–µ–≤–∞
return lpad(result, length(part), '0')  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
end

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç PQ –∏ NK –ø–æ –Ω–∞—á–∞–ª—É –∏ –∫–æ–Ω—Ü—É
function compare_pq_nk(pq::String, nk::String)
 if pq == nk                       # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
return "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
end

min_len = min(length(pq), length(nk))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

prefix_match = 0 # –°—á–µ—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ
for i in 1:min_len
pq[i] == nk[i] ? prefix_match += 1 : break  # –ü–æ–∫–∞ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
end

suffix_match = 0 # –°—á–µ—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Ü–µ
for i in 1:min_len
pq[end - i + 1] == nk[end - i + 1] ? suffix_match += 1 : break
end

if prefix_match > 0 && suffix_match > 0
return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"
elseif prefix_match > 0
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ"
elseif suffix_match > 0
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü"
else
return "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
function check_hypothesis(N::Integer, m::Integer, k::Integer)
N_str = string(N) # –ß–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
nk_str = string(N * k) # N * k –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

parts_str = split_number_str(N, m) # –†–∞–∑–±–∏–≤–∞–µ–º N –Ω–∞ m —á–∞—Å—Ç–µ–π
multiplied_parts_str = [multiply_preserve_length(p, k) for p in parts_str]  # –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
pq_str = join(multiplied_parts_str) # –°–æ–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ

result = compare_pq_nk(pq_str, nk_str) # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º PQ –∏ NK

return (  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ (NamedTuple) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
N = N, # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
m = m, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏–≤–∞–ª–æ—Å—å —á–∏—Å–ª–æ
k = k, # –ú–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–º–Ω–æ–∂–∞–ª–∏ —á–∞—Å—Ç–∏
parts = string(parts_str), # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DataFrame)
multiplied_parts = string(multiplied_parts_str),  # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
PQ = pq_str, # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
NK = nk_str, # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ N –Ω–∞ k
result = result # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Ç–∏–ø —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ
)
end

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
function run_tests_parallel(start_N::Integer, stop_N::Integer, m::Integer, k::Integer)
total_numbers = stop_N - start_N + 1 # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start_N, stop_N]
results5_df = DataFrame(  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
 N = Int[], # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
 m = Int[], # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (m)
k = Int[],  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å (k)
parts = String[], # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
multiplied_parts = String[], # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
PQ = String[], # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
NK = String[], # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ N –Ω–∞ k
result = String[] # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –ø–æ–ª–Ω–æ–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏ —Ç.–¥.
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
count_full = Atomic{Int}(0) # –ü–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
count_partial_start = Atomic{Int}(0) # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
count_partial_end = Atomic{Int}(0) # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
count_partial_both = Atomic{Int}(0) # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –≤ –Ω–∞—á–∞–ª–µ, –∏ –≤ –∫–æ–Ω—Ü–µ
count_none = Atomic{Int}(0) # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
@showprogress "üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º N ‚àà [$start_N, $stop_N], m = $m, k = $k" for N in start_N:stop_N

res = check_hypothesis(N, m, k) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ N
Threads.atomic_add!(count_full, res.result == "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ "–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π
Threads.atomic_add!(count_partial_start, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ "–°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ", –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π
Threads.atomic_add!(count_partial_end, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ "–°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü", –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π
Threads.atomic_add!(count_partial_both, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ "–°–æ–≤–ø–∞–¥–∞—é—Ç –∏ –Ω–∞—á–∞–ª–æ, –∏ –∫–æ–Ω–µ—Ü", –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π
Threads.atomic_add!(count_none, res.result == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π

push!(results5_df, [ # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
res.N # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
res.m # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (m)
res.k # –ú–Ω–æ–∂–∏—Ç–µ–ª—å (k)
res.parts # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
res.multiplied_parts # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
res.PQ # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
res.NK # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ N * k
res.result # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –ø–æ–ª–Ω–æ–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏ —Ç.–¥.
])
end

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
full = count_full[]                   # –ü–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Atomic{Int}
partial_start = count_partial_start[] # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
partial_end = count_partial_end[]     # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü
partial_both = count_partial_both[]   # –°–æ–≤–ø–∞–¥–∞—é—Ç –∏ –Ω–∞—á–∞–ª–æ, –∏ –∫–æ–Ω–µ—Ü
none = count_none[]                   # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤–æ–æ–±—â–µ

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
println("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV...") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV-—Ñ–∞–π–ª
CSV.write("results5.csv", results5_df) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame results5_df –≤ —Ñ–∞–π–ª 'results5.csv'

open("statistics.txt", "w") do io # –û—Ç–∫—Ä—ã–≤–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª statistics.txt –¥–ª—è –∑–∞–ø–∏—Å–∏ ("w" = write)
write(io, "üìä –ì–∏–ø–æ—Ç–µ–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π —á–∏—Å–ª–æ–≤–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏\n") # –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
write(io, "=========================================\n")   # –ü–∏—à–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
write(io, "–î–∏–∞–ø–∞–∑–æ–Ω N: [$start_N, $stop_N]\n") # –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
write(io, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π m = $m\n") # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π
write(io, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å k = $k\n") # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–º–Ω–æ–∂–µ–Ω–∏—è
write(io, "-----------------------------------------\n") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    write(io, "  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $full\n")            # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ PQ == NK
    write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: $partial_both\n")  # –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
    write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ: $partial_start\n")  # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü: $partial_end\n")     # –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    write(io, "  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $none\n")               # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤–æ–æ–±—â–µ
    write(io, "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É ‚Äî –≤ 'results5.csv'\n")
end  # –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ `do io ... end`

# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (–∫–æ–Ω—Å–æ–ª—å)
println("\nüìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:") # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@printf("  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", full) # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: %d\n", partial_both) # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ: %d\n", partial_start) # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü: %d\n", partial_end) # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
@printf("  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", none) # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
println("\nüìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'statistics.txt'") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª
println("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results5.csv'") # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

return results5_df # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
end

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
start_N = 10 # –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
stop_N = 10000000 # –ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
m = 2 # –ß–∏—Å–ª–æ —á–∞—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è N
k = 7 # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è —á–∞—Å—Ç–µ–π

# –ó–∞–ø—É—Å–∫
run_tests_parallel(start_N, stop_N, m, k)
