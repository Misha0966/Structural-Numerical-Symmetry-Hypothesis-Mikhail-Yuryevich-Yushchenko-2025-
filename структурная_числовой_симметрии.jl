using Printf   # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
using CSV      # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
using DataFrames # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ N –Ω–∞ m —á–∞—Å—Ç–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö –ø–æ –¥–ª–∏–Ω–µ
function split_number(N::Integer, m::Integer)
s = string(N) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è
len = length(s) # –î–ª–∏–Ω–∞ —á–∏—Å–ª–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä)
base_len = div(len, m) # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
remainder = len % m # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ 1 —Å–∏–º–≤–æ–ª

parts = String[] # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —á–∏—Å–ª–∞
idx = 1 # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ

for i in 1:m  # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ m —á–∞—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —á–∏—Å–ª–∞
current_len = base_len + (i <= remainder ? 1 : 0)  # –î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
push!(parts, s[idx:idx+current_len-1]) # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
idx += current_len # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
end

return [parse(BigInt, p) for p in parts] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ BigInt
end

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ pq –∏ nk –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
function compare_pq_nk(pq::String, nk::String)
if pq == nk # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ pq –∏ nk
return "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" 
elseif startswith(nk, first(pq)) && endswith(nk, last(pq)) # –°–æ–≤–ø–∞–¥–∞—é—Ç –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª—ã
return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"
elseif startswith(nk, first(pq)) # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ"
elseif endswith(nk, last(pq)) # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü"
else  # –ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
return "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
end
end

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ N
function check_hypothesis(N::Integer, m::Integer, k::Integer)
N_str = string(N) # –ß–∏—Å–ª–æ N –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
nk = string(N * k) # –£–º–Ω–æ–∂–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

parts = split_number(N, m) # –†–∞–∑–±–∏–≤–∞–µ–º N –Ω–∞ m —á–∞—Å—Ç–µ–π
pq_parts = [string(p * k) for p in parts] # –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
pq = join(pq_parts) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ —á–∏—Å–ª–æ PQ

result = compare_pq_nk(pq, nk) # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º PQ –∏ N*k

return (
N = N, # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
m = m, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è N
k = k,  # –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
parts = string(parts),  # –†–∞–∑–±–∏–µ–Ω–∏–µ N –Ω–∞ —á–∞—Å—Ç–∏ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫)
multiplied_parts = string([p * k for p in parts]),  # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ k —á–∞—Å—Ç–∏
PQ = pq, # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
NK = nk, # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ N –Ω–∞ k
result = result  # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É PQ –∏ NK
)
end

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
function run_tests(start_N::Integer, stop_N::Integer, m::Integer, k::Integer)

results_df = DataFrame(            # –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
N = BigInt[], # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
m = Int[], # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
k = Int[], # –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
parts = String[], # –†–∞–∑–±–∏–µ–Ω–∏–µ N –Ω–∞ —á–∞—Å—Ç–∏ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
multiplied_parts = String[], # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
PQ = String[], # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
NK = String[], # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ N –Ω–∞ k
result = String[] # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
)

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

count_full = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
count_partial_start = 0  # –°—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ
count_partial_end = 0  # –°—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Ü–µ
count_partial_both = 0 # –°—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –≤ –Ω–∞—á–∞–ª–µ, –∏ –≤ –∫–æ–Ω—Ü–µ
count_none = 0 # –°—á—ë—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

# –í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
@printf("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã\n")
@printf("–î–∏–∞–ø–∞–∑–æ–Ω: [%d, %d], m = %d, k = %d\n", start_N, stop_N, m, k)

for N in start_N:stop_N  # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —á–∏—Å–ª–∞–º N –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

print("\rüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ N = $N...")  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

res = check_hypothesis(N, m, k)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ N

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É (DataFrame)        
push!(results_df, [
res.N # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
res.m # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π m
res.k # –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å k
res.parts  # –†–∞–∑–±–∏–µ–Ω–∏–µ —á–∏—Å–ª–∞ N –Ω–∞ —á–∞—Å—Ç–∏ (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
res.multiplied_parts # –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
res.PQ  # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
res.NK # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è N * k
res.result  # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
])

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
if res.result == "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
count_full += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü" 
count_partial_both += 1  # –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ"
count_partial_start += 1  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
elseif res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü"
count_partial_end += 1  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü
else
count_none += 1  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
end
end

println("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV...") # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV-—Ñ–∞–π–ª 
CSV.write("results.csv", results_df) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame –≤ —Ñ–∞–π–ª 'results.csv'

println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:") # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
@printf("  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", count_full)  # –í—Å–µ–≥–æ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ: %d\n", count_partial_start) # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü: %d\n", count_partial_end)  # –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: %d\n", count_partial_both)  # –ò –Ω–∞—á–∞–ª–æ, –∏ –∫–æ–Ω–µ—Ü
@printf("  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", count_none)  # –ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

println("\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results.csv'") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ –º–µ—Å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
return results_df # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
end

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

start_N = 10  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
stop_N = 100 # –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
m = 2 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
k = 7 # –º–Ω–æ–∂–∏—Ç–µ–ª—å

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
run_tests(start_N, stop_N, m, k)
