using Printf
using CSV
using DataFrames

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ n –ø—Ä–æ—Å—Ç—ã–º.
function is_prime(n::Integer)::Bool
    n < 2 && return false
    n == 2 && return true
    iseven(n) && return false
    for i in 3:isqrt(n)+1
        n % i == 0 && return false
    end
    return true
end

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start, stop].
function generate_primes(start::Integer, stop::Integer)::Vector{Int}
    primes = Int[]
    for n in max(2, start):stop
        if is_prime(n)
            push!(primes, n)
        end
    end
    return primes
end

# –†–∞–∑–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ N –Ω–∞ m —á–∞—Å—Ç–µ–π —Ä–∞–≤–Ω–æ–π –¥–ª–∏–Ω—ã.
# –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ N –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ m, —á–∞—Å—Ç–∏ –±—É–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏–º–∏ –ø–æ –¥–ª–∏–Ω–µ.
function split_number(N::Integer, m::Integer)::Vector{Int}
    s = string(N)
    d = length(s)

    if m <= 0
        error("–ß–∏—Å–ª–æ —á–∞—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    end

    l = div(d, m)
    rem = d % m

    parts = Int[]
    idx = 1

    for i in 1:m
        current_length = l + (i <= rem ? 1 : 0)
        part = parse(Int, s[idx:idx+current_length-1])
        push!(parts, part)
        idx += current_length
    end

    return parts
end

# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É PQ –∏ N*k.
# –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
function classify_match(pq::Integer, product::Integer)::String
    pq_str = string(pq)
    prod_str = string(product)

    # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if pq == product
        return "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
    end

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–≤ 10^n —Ä–∞–∑)
    for n in 1:5
        if pq == product * 10^n
            return "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ $n —Ä–∞–∑(–∞)"
        end
    end

    # –°–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª–æ?
    min_len = min(length(pq_str), length(prod_str))
    for i in 1:min_len
        if pq_str[1:i] != prod_str[1:i]
            break
        end
        if i == min_len || prod_str[i+1] != pq_str[i+1]
            return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã"
        end
    end

    # –°–æ–≤–ø–∞–¥–∞–µ—Ç –∫–æ–Ω–µ—Ü?
    for i in 1:min_len
        pos_pq = length(pq_str) - i + 1
        pos_prod = length(prod_str) - i + 1
        if pq_str[pos_pq:end] == prod_str[pos_prod:end]
            return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã"
        end
    end

    # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    return "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
end

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π —á–∏—Å–ª–æ–≤–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏ –¥–ª—è —á–∏—Å–ª–∞ N.
function check_symmetry(N::Integer, k::Integer, m::Integer)::Tuple{Bool,String}
    s = string(N)
    d = length(s)

    # –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ m —á–∞—Å—Ç–µ–π —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ
    if d < m
        return false, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ü–∏—Ñ—Ä –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ $m —á–∞—Å—Ç–µ–π"
    end

    try
        parts = split_number(N, m)
        q_parts = [part * k for part in parts]
        pq = parse(BigInt, join(string.(q_parts)))
        product = N * k

        result = classify_match(pq, product)
        return true, result
    catch e
        return false, "‚ö†Ô∏è –û—à–∏–±–∫–∞: $(sprint(showerror, e))"
    end
end

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç start –¥–æ stop.
function run_check_range(start::Integer, stop::Integer, k::Integer, m::Integer)
    println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª –æ—Ç $start –¥–æ $stop, k = $k, m = $m:")
    println("-"^60)

    stats = Dict(
        "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 1 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 3 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 5 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" => 0,
        "‚ö†Ô∏è –û—à–∏–±–∫–∏" => 0
    )

    for N in start:stop
        success, result = check_symmetry(N, k, m)

        if !success
            stats["‚ö†Ô∏è –û—à–∏–±–∫–∏"] += 1
            continue
        end

        stats[result] += 1

        if verbose
            @printf "N = %8d ‚Üí %s\n" N result
        end
    end

    println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
    for (key, value) in sort(collect(stats), by = x -> -x[2])
        println("  $key: $value")
    end
end

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã —Ç–æ–ª—å–∫–æ –¥–ª—è **–ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª** –æ—Ç start –¥–æ stop.
function run_check_primes(start::Integer, stop::Integer, k::Integer, m::Integer)
    println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–†–û–°–¢–´–• —á–∏—Å–µ–ª –æ—Ç $start –¥–æ $stop, k = $k, m = $m:")
    println("-"^60)

    primes = generate_primes(start, stop)
    isempty(primes) && return println("üö´ –ü—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ—Ç.")

    stats = Dict(
        "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 1 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 3 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 5 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" => 0,
        "‚ö†Ô∏è –û—à–∏–±–∫–∏" => 0
    )

    for N in primes
        success, result = check_symmetry(N, k, m)

        if !success
            stats["‚ö†Ô∏è –û—à–∏–±–∫–∏"] += 1
            continue
        end

        stats[result] += 1
        @printf "N = %8d ‚Üí %s\n" N result
    end

    println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª):")
    for (key, value) in sort(collect(stats), by = x -> -x[2])
        println("  $key: $value")
    end
end

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç start –¥–æ stop.
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV-—Ñ–∞–π–ª.
function run_check_range_to_file(start::Integer, stop::Integer, k::Integer, m::Integer, filename::String = "results.csv", verbose::Bool = true)
    if verbose
        println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª –æ—Ç $start –¥–æ $stop, k = $k, m = $m:")
        println("-"^60)
    end

    stats = Dict(
        "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 1 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 3 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ 5 —Ä–∞–∑" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã" => 0,
        "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" => 0,
        "‚ö†Ô∏è –û—à–∏–±–∫–∏" => 0
    )

    df = DataFrame(N=Int[], k=Int[], m=Int[], PQ=String[], product=String[], result=String[])

    for N in start:stop
        s = string(N)
        d = length(s)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ m —á–∞—Å—Ç–µ–π
        if d < m
            error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ü–∏—Ñ—Ä –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ $m —á–∞—Å—Ç–µ–π"
            push!(df, [N, k, m, "", "", error_msg])
            stats["‚ö†Ô∏è –û—à–∏–±–∫–∏"] += 1
            continue
        end

        success, result = check_symmetry(N, k, m)

        if !success
            stats["‚ö†Ô∏è –û—à–∏–±–∫–∏"] += 1
            push!(df, [N, k, m, "", "", result])
            continue
        end

        parts = split_number(N, m)
        q_parts = [part * k for part in parts]
        pq = join(string.(q_parts))
        product = string(N * k)

        push!(df, [N, k, m, pq, product, result])

        stats[result] += 1

        if verbose
            @printf "N = %8d ‚Üí %s\n" N result
        end
    end

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    CSV.write(filename, df)

    if verbose
        println("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $filename")
        println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for (key, value) in sort(collect(stats), by = x -> -x[2])
            println("  $key: $value")
        end
    end
end

# üîÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
start = 10
stop =  100
k = 7
m = 2

run_check_range_to_file(start, stop, k, m, "results.csv", true)